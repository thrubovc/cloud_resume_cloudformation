Resources:
  ResumeTomaskoEuS3:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: test.tomasko.eu
      LoggingConfiguration:
        DestinationBucketName: !Ref ResumeAccessLogsS3
      WebsiteConfiguration:
        IndexDocument: index.html

  ResumeAccessLogsS3:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: test-web-access-logs
      AccessControl: LogDeliveryWrite

  ResumeTomaskoEuBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket:
        Ref: ResumeTomaskoEuS3
      PolicyDocument:
        Statement:
          - Action:
            - 's3:GetObject'
            Effect: Allow
            Resource:
              'Fn::Join':
                - ''
                - - 'arn:aws:s3:::'
                  - Ref: ResumeTomaskoEuS3
                  - /*
            Principal: '*'
            Condition:
              IpAddress:
                'aws:SourceIp': '88.212.33.170/32'

  ResumeVisitorCountDynamo:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: test_visitor_counter
      AttributeDefinitions:
        -
          AttributeName: 'type'
          AttributeType: 'S'
        -
          AttributeName: 'visits'
          AttributeType: 'N'
      KeySchema:
        -
          AttributeName: 'type'
          KeyType: 'HASH'
        -
          AttributeName: 'visits'
          KeyType: 'RANGE'
      ProvisionedThroughput:
        ReadCapacityUnits: '2'
        WriteCapacityUnits: '2'

  ResumeVisitorCountAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: 'test_visitor_counter'
      Parameters:
        endpointConfigurationTypes: REGIONAL

  ResumeVisitorCountAPIRootGet:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ResumeVisitorCountAPI
      ResourceId: !GetAtt
        - ResumeVisitorCountAPI
        - RootResourceId
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: GET
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ResumeVisitorCountLambda.Arn}/invocations

  ProdStageAPI:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: Prod
      DeploymentId: !Ref APIDeployment
      RestApiId: !Ref ResumeVisitorCountAPI

  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ResumeVisitorCountAPIRootGet
    Properties:
      RestApiId: !Ref ResumeVisitorCountAPI

  ResumeVisitorCountLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function
      Runtime: python3.7
      Role: arn:aws:iam::062169285522:role/service-role/resume_visitor_counter_dynamoDB-role-9jjt8tmu
      Code:
        ZipFile: |
          import boto3
          import json
          import decimal


          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('visitor_counter')


          def replace_decimal(obj):
              if isinstance(obj, list):
                  for i in range(len(obj)):
                      obj[i] = replace_decimal(obj[i])
                  return obj
              elif isinstance(obj, dict):
                  for k, v in obj.items():
                      obj[k] = replace_decimal(v)
                  return obj
              elif isinstance(obj, set):
                  return set(replace_decimal(i) for i in obj)
              elif isinstance(obj, decimal.Decimal):
                  if obj % 1 == 0:
                      return int(obj)
                  else:
                      return float(obj)
              else:
                  return obj


          def lambda_handler(event, context):
              response = table.update_item(
                  Key={
                      'type': 'count'
                  },
                  UpdateExpression='SET visits = visits + :inc',
                  ExpressionAttributeValues={
                      ':inc': 1
                  },
                  ReturnValues='UPDATED_NEW'
              )
              item = response['Attributes']

              return {
                  'statusCode': 200,
                  'headers': {
                      'Access-Control-Allow-Origin': '*',
                      'Access-Control-Allow-Methods': 'GET'
                  },
                  'body': json.dumps(replace_decimal(item))
              }
      TracingConfig:
        Mode: Active

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: DynamodbUpdateItem
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:Query"
                Resource: !GetAtt ResumeVisitorCountDynamo.Arn
